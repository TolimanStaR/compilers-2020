-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;


-- A parser of "something" in brackets; l, r are left and right
-- brackets as strings, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression

-- косяк: если поставить {obj}, то это будет не лист, а скоуп
-- (не забыть про это)
-- obj:{} - list с 1 объектом
-- singleton(obj) -> то же самое, почему я это только щас узнал
-- fun arrayList (a)
-- Converts an array to list (preserving the order of elements).

local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   x=lident {Var (x)}                |
                                   inbr[s("("), exp, s(")")]),
	binop_operation = fun (left, op, right) {Binop(op, left, right)},  -- does the var names affect the runtime?
	operations = {
	  				[Left, [s("&&"), binop_operation] : {}],
	  				[Left, [s("!!"), binop_operation] : {}],
	  				[Nona, [s("==") | s("!=") | s("<=") | s(">=") |  s("<") | s(">"), binop_operation] : {}],
	  				[Left, [s("*") | s("/") | s("%"), binop_operation] : {}],
	  				[Left, [s("+") | s("-"), binop_operation] : {}]},
    exp = memo $ eta expr(operations, primary);


local stmt = memo $ eta syntax (
	kWrite elem=inbr[s("("), expr, s(")")] {Write(elem)}     |
	kRead elem=inbr[s("("), lident, s(")")] {Read(elem)}     |
	first=lident s[":="] second=exp {Assn(first, second)}    |
	x1=stmt s[";"] x2=stmt end {Seq(x1, x2)}         |
	kSkip {Skip}
);
   

-- Public top-level parser
public parse = stmt;
