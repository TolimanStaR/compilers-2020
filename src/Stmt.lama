-- Statement evaluator.

import List;
import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (condition, statement) {
	case condition of [state, [in, out]] -> 
		case statement of
			  Skip -> condition
			| Assn(elem, e) -> [(state <- [elem, evalExpr(state, e)]), [in, out]]
			| Seq(fi, se) -> eval(eval(condition, fi), se)
			| Read(elem) -> case in of el : __in -> [state <- [elem, el], [__in, out]] esac
			| Write(elem) -> [state, [in, evalExpr(state, elem) : out]]
		esac
	esac
}

-- Evaluates a program with a given input and returns an output

public fun evalStmt (input, stmt) {
	eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
