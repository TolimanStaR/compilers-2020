-- Stack machine.

<<<<<<< HEAD
import Array;
import List;
import Fun;
import Collection;
=======
import List;
>>>>>>> A04-control-flow-int
import World;
import State;
import Expr;
import Buffer;
<<<<<<< HEAD
=======
import Fun;
>>>>>>> A04-control-flow-int

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> sprintf ("READ")
  | WRITE        -> sprintf ("WRITE")
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

<<<<<<< HEAD
-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
-- Instruction = READ | WRITE | BINOP String | LD X | ST X | CONST N

-- remains the same
fun eval (condition, instance) {
	case condition of 
    [stack, state, world@[in, out]] -> 
  		case instance of
  			  {} -> condition 
  			| BINOP (binop) : remaining -> case stack of right : left : stack__ -> eval([parse_bin_operation(binop, left, right) : stack__,state,world], remaining) esac
  			| CONST (n) : remaining -> eval([n : stack, state, world], remaining)
  			| READ : remaining -> case in of elem : in__ -> eval([elem : stack, state, [in__, out]], remaining) esac
  			| WRITE : remaining -> case stack of elem : stack__ -> eval([stack__, state, [in, elem : out]], remaining) esac
  			| LD (elem) : remaining -> eval([state (elem) : stack, state, world], remaining)
  			| ST (elem) : remaining -> case stack of other : stack__ -> eval([stack, (state <- [elem, other]), world], remaining) esac
  		esac
	esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions


fun compileExpr (expression) {
  case expression of
        Const(n) -> singleton(CONST(n))
      | Var(x) -> singleton(LD(x))
      | Binop(bop, left, right) -> compileExpr(left) +++ compileExpr(right) +++ singleton(BINOP(bop))
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.


public fun compileSM (statement) {
  case statement of
      Skip -> {}
    | Assn(elem, expression) -> compileExpr(expression) +++ singleton(ST(elem))
    | Read(elem) -> singleton(READ) +++ singleton(ST(elem))
    | Write(elem) -> compileExpr(elem) +++ singleton(WRITE)
    | Seq(s1, s2) -> compileSM(s1) +++ compileSM(s2)
  esac
}
